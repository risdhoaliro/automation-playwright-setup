# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Profile Tests >> Mitra Profile Tests >> Profile Management Tests >> Update Profile with Valid Data
- Location: /Applications/automation-nearon-playwright/Tests/profile.test.ts:249:17

# Error details

```
TimeoutError: locator.click: Timeout 30000ms exceeded.
Call log:
  - waiting for locator('//*[@id="__next"]/div/div/div[1]/div[2]/a/div')
    - locator resolved to <div class="ant-flex css-1y82enc ant-flex-align-center">…</div>
  - attempting click action
    - waiting for element to be visible, enabled and stable

    at ProfilePage.gotoProfilePage (/Applications/automation-nearon-playwright/Pages/Profile/key_profile.ts:25:41)
    at setupMitraProfileTests (/Applications/automation-nearon-playwright/Pages/Profile/suite_profile.ts:22:5)
    at /Applications/automation-nearon-playwright/Tests/profile.test.ts:210:27
```

# Page snapshot

```yaml
- button "Menu":
  - img "Menu"
- link "Nearon":
  - img "Nearon"
- separator
- text: Theme
- switch "moon sun":
  - img "moon"
  - img "sun"
- button
- separator
- link "avatar Luigi":
  - img "avatar"
  - text: Luigi
- button "Org Settings":
  - img "Org Settings"
- button "Privacy & Security":
  - img "Privacy & Security"
- button "Sensor Management":
  - img "Sensor Management"
- button "Device Management":
  - img "Device Management"
- button "poweroff":
  - img "poweroff"
- main:
  - navigation:
    - list:
      - listitem:
        - link "Org Settings"
  - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - link "Leaflet"
  - text: ©
  - link "OpenStreetMap"
  - text: contributors
  - img "search"
  - combobox "Search location by district"
  - button "Search"
  - button "plus":
    - img "plus"
  - button "minus":
    - img "minus"
  - button "aim":
    - img "aim"
  - button "eye":
    - img "eye"
  - img "project"
  - text: Node
  - heading "5" [level=3]
  - img "project"
  - text: Sensor
  - heading "70" [level=3]
  - img "project"
  - text: Actuator
  - heading "2" [level=3]
  - img "project"
  - text: CCTV
  - heading "17" [level=3]
  - img "Nearon"
  - text: Copyright © 2024 Nearon Powered by
  - link "Synapsis.id"
  - text: ", All Rights Reserved build version 0.0.6"
  - link "Synapsis LinkedIn":
    - img "Synapsis LinkedIn"
  - link "Synapsis Instagram":
    - img "Synapsis Instagram"
  - link "Synapsis Website":
    - img "Synapsis Website"
- alert: Nearon
- alert:
  - img "check-circle"
  - text: Login success
- img "close"
```

# Test source

```ts
   1 | import { Page } from '@playwright/test';
   2 | import { BasePage } from '@fixtures/basePage';
   3 | import { ProfileElements } from './el_profile';
   4 | import { expect, test } from "@playwright/test";
   5 | import data from "../../General/data";
   6 | import { waitTime } from "../../General/constants";
   7 |
   8 | interface UpdateProfileData {
   9 |     name: string;
   10 |     email: string;
   11 |     whatsappNumber: string;
   12 |     telegramUsername: string;
   13 | }
   14 |
   15 | export class ProfilePage extends BasePage {
   16 |     private readonly elements: ProfileElements;
   17 |
   18 |     constructor(page: Page) {
   19 |         super(page);
   20 |         this.elements = new ProfileElements(page);
   21 |     }
   22 |
   23 |     async gotoProfilePage() {
   24 |         await this.elements.profileMenu.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
>  25 |         await this.elements.profileMenu.click();
      |                                         ^ TimeoutError: locator.click: Timeout 30000ms exceeded.
   26 |         await this.page.waitForURL('**/profile', { timeout: waitTime.MEDIUM });
   27 |     }
   28 |
   29 |     // Profile Picture Methods
   30 |     async uploadProfilePicture(filePath: string) {
   31 |         await this.elements.chooseFileButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   32 |         const [fileChooser] = await Promise.all([
   33 |             this.page.waitForEvent('filechooser'),
   34 |             this.elements.chooseFileButton.click()
   35 |         ]);
   36 |         await fileChooser.setFiles(filePath);
   37 |     }
   38 |
   39 |     async savePhotoProfileButton() {
   40 |         const button = this.elements.savePhotoProfileButton;
   41 |         await button.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   42 |         await button.click();
   43 |     }
   44 |
   45 |     async getProfilePicturePreview() {
   46 |         const preview = this.elements.profilePicturePreview;
   47 |         await preview.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   48 |         return preview;
   49 |     }
   50 |
   51 |     // Update Profile Methods
   52 |     async clickUpdateProfileButton() {
   53 |         await this.elements.updateButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   54 |         await this.elements.updateButton.click();
   55 |     }
   56 |
   57 |     async getUpdateProfileModal() {
   58 |         return this.elements.updateProfileModal;
   59 |     }
   60 |
   61 |     // Clear field methods
   62 |     private async clearProfileFields() {
   63 |         await this.elements.nameInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   64 |         await this.elements.nameInput.clear();
   65 |         
   66 |         await this.elements.emailInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   67 |         await this.elements.emailInput.clear();
   68 |         
   69 |         await this.elements.whatsappNumberInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   70 |         await this.elements.whatsappNumberInput.clear();
   71 |         
   72 |         await this.elements.telegramUsernameInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   73 |         await this.elements.telegramUsernameInput.clear();
   74 |
   75 |         await this.verifyFieldsAreEmpty();
   76 |     }
   77 |
   78 |     private async verifyFieldsAreEmpty() {
   79 |         await expect(this.elements.nameInput).toHaveValue('');
   80 |         await expect(this.elements.emailInput).toHaveValue('');
   81 |         await expect(this.elements.whatsappNumberInput).toHaveValue('');
   82 |         await expect(this.elements.telegramUsernameInput).toHaveValue('');
   83 |     }
   84 |
   85 |     async fillUpdateProfileForm(data: UpdateProfileData) {
   86 |         await this.clearProfileFields();
   87 |         await this.elements.nameInput.fill(data.name);
   88 |         await this.elements.emailInput.fill(data.email);
   89 |         await this.elements.whatsappNumberInput.fill(data.whatsappNumber);
   90 |         await this.elements.telegramUsernameInput.fill(data.telegramUsername);
   91 |     }
   92 |
   93 |     async clickSaveChangesButton() {
   94 |         await this.elements.saveChangesButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   95 |         await this.elements.saveChangesButton.click();
   96 |     }
   97 |
   98 |     async clickCancelButton() {
   99 |         await this.elements.cancelButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  100 |         await this.elements.cancelButton.click();
  101 |     }
  102 |
  103 |     async getSuccessMessageUploadImageValid() {
  104 |         const message = this.page.getByText(data.profileData.messages.successImageUpdate);
  105 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  106 |         return message;
  107 |     }
  108 |
  109 |     async getErrorMessageUploadImageInValid() {
  110 |         const message = this.page.getByText(data.profileData.messages.error.fileTooBig);
  111 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  112 |         return message;
  113 |     }
  114 |
  115 |     async getSuccessMessageUpdateProfile() {
  116 |         const message = this.page.getByText(data.profileData.messages.successProfileUpdate);
  117 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  118 |         return message;
  119 |     }
  120 |
  121 |     // Password Change Methods
  122 |     async changePassword(currentPassword: string, newPassword: string, confirmPassword: string) {
  123 |         await test.step('Change Password Process', async () => {
  124 |             let retries = 5;
  125 |             let isVisible = false;
```