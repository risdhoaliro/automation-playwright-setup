# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Profile Tests >> Mitra Profile Tests > Password Management Tests >> should validate password confirmation match
- Location: /Applications/automation-nearon-playwright/Tests/profile.test.ts:328:13

# Error details

```
TimeoutError: locator.click: Timeout 30000ms exceeded.
Call log:
  - waiting for getByText('Save Password')
    - locator resolved to <span>Save Password</span>
  - attempting click action
    - waiting for element to be visible, enabled and stable

    at /Applications/automation-nearon-playwright/Pages/Profile/key_profile.ts:143:56
    at /Applications/automation-nearon-playwright/Pages/Profile/key_profile.ts:139:13
    at ProfilePage.changePassword (/Applications/automation-nearon-playwright/Pages/Profile/key_profile.ts:123:9)
    at /Applications/automation-nearon-playwright/Tests/profile.test.ts:330:17
    at /Applications/automation-nearon-playwright/Tests/profile.test.ts:329:13
```

# Test source

```ts
   43 |     }
   44 |
   45 |     async getProfilePicturePreview() {
   46 |         const preview = this.elements.profilePicturePreview;
   47 |         await preview.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   48 |         return preview;
   49 |     }
   50 |
   51 |     // Update Profile Methods
   52 |     async clickUpdateProfileButton() {
   53 |         await this.elements.updateButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   54 |         await this.elements.updateButton.click();
   55 |     }
   56 |
   57 |     async getUpdateProfileModal() {
   58 |         return this.elements.updateProfileModal;
   59 |     }
   60 |
   61 |     // Clear field methods
   62 |     private async clearProfileFields() {
   63 |         await this.elements.nameInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   64 |         await this.elements.nameInput.clear();
   65 |         
   66 |         await this.elements.emailInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   67 |         await this.elements.emailInput.clear();
   68 |         
   69 |         await this.elements.whatsappNumberInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   70 |         await this.elements.whatsappNumberInput.clear();
   71 |         
   72 |         await this.elements.telegramUsernameInput.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   73 |         await this.elements.telegramUsernameInput.clear();
   74 |
   75 |         await this.verifyFieldsAreEmpty();
   76 |     }
   77 |
   78 |     private async verifyFieldsAreEmpty() {
   79 |         await expect(this.elements.nameInput).toHaveValue('');
   80 |         await expect(this.elements.emailInput).toHaveValue('');
   81 |         await expect(this.elements.whatsappNumberInput).toHaveValue('');
   82 |         await expect(this.elements.telegramUsernameInput).toHaveValue('');
   83 |     }
   84 |
   85 |     async fillUpdateProfileForm(data: UpdateProfileData) {
   86 |         await this.clearProfileFields();
   87 |         await this.elements.nameInput.fill(data.name);
   88 |         await this.elements.emailInput.fill(data.email);
   89 |         await this.elements.whatsappNumberInput.fill(data.whatsappNumber);
   90 |         await this.elements.telegramUsernameInput.fill(data.telegramUsername);
   91 |     }
   92 |
   93 |     async clickSaveChangesButton() {
   94 |         await this.elements.saveChangesButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   95 |         await this.elements.saveChangesButton.click();
   96 |     }
   97 |
   98 |     async clickCancelButton() {
   99 |         await this.elements.cancelButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  100 |         await this.elements.cancelButton.click();
  101 |     }
  102 |
  103 |     async getSuccessMessageUploadImageValid() {
  104 |         const message = this.page.getByText(data.profileData.messages.successImageUpdate);
  105 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  106 |         return message;
  107 |     }
  108 |
  109 |     async getErrorMessageUploadImageInValid() {
  110 |         const message = this.page.getByText(data.profileData.messages.error.fileTooBig);
  111 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  112 |         return message;
  113 |     }
  114 |
  115 |     async getSuccessMessageUpdateProfile() {
  116 |         const message = this.page.getByText(data.profileData.messages.successProfileUpdate);
  117 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  118 |         return message;
  119 |     }
  120 |
  121 |     // Password Change Methods
  122 |     async changePassword(currentPassword: string, newPassword: string, confirmPassword: string) {
  123 |         await test.step('Change Password Process', async () => {
  124 |             let retries = 5;
  125 |             let isVisible = false;
  126 |
  127 |             while (retries > 0 && !isVisible) {
  128 |                 try {
  129 |                     await this.elements.changePasswordSection.scrollIntoViewIfNeeded();
  130 |                     await this.elements.currentPasswordInput.waitFor({ state: 'visible', timeout: waitTime.SHORT });
  131 |                     isVisible = true;
  132 |                 } catch (error) {
  133 |                     retries--;
  134 |                     console.log(`Retry scrolling to change password section... (${retries} attempts left)`);
  135 |                     if (retries === 0) throw error;
  136 |                 }
  137 |             }
  138 |
  139 |             await test.step('Fill Password Form', async () => {
  140 |                 await this.elements.currentPasswordInput.fill(currentPassword);
  141 |                 await this.elements.newPasswordInput.fill(newPassword);
  142 |                 await this.elements.confirmPasswordInput.fill(confirmPassword);
> 143 |                 await this.elements.savePasswordButton.click();
      |                                                        ^ TimeoutError: locator.click: Timeout 30000ms exceeded.
  144 |             });
  145 |         });
  146 |     }
  147 |
  148 |     async getSuccessMessageChangePassword() {
  149 |         const message = this.page.getByText(data.ChangePasswordData.messages.success);
  150 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  151 |         return message;
  152 |     }
  153 |
  154 |     async getPasswordMismatchError() {
  155 |         const message = this.page.getByText(data.ChangePasswordData.messages.error.passwordMismatch);
  156 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  157 |         return message;
  158 |     }
  159 |
  160 |     // Activity Log Methods
  161 |     async isActivityLogSectionVisible(): Promise<boolean> {
  162 |         const visibility = await this.elements.activityLogSection.isVisible();
  163 |         console.log(visibility ? 'Permission Activity Log aktif' : 'Permission Activity Log belum diaktifkan');
  164 |         return visibility;
  165 |     }
  166 |
  167 |     async openActivityLog() {
  168 |         await test.step('Open Activity Log Section', async () => {
  169 |             await this.elements.activityLogSection.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  170 |             await this.elements.activityLogSection.click();
  171 |             
  172 |             try {
  173 |                 await this.elements.activityLogData.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  174 |                 const logText = await this.elements.activityLogData.textContent();
  175 |                 console.log('Activity Log Data:', { text: logText, timestamp: new Date().toISOString() });
  176 |             } catch (error) {
  177 |                 console.log('No Activity Log Data visible');
  178 |                 throw error;
  179 |             }
  180 |         });
  181 |     }
  182 |
  183 |     // Getters for verification
  184 |     async getDisplayedNameValue() {
  185 |         return await this.elements.getDisplayedNameValue();
  186 |     }
  187 |
  188 |     async getDisplayedEmailValue() {
  189 |         return await this.elements.getDisplayedEmailValue();
  190 |     }
  191 |
  192 |     async getDisplayedWhatsappValue() {
  193 |         return await this.elements.getDisplayedWhatsappValue();
  194 |     }
  195 |
  196 |     async getDisplayedTelegramValue() {
  197 |         return await this.elements.getDisplayedTelegramValue();
  198 |     }
  199 |
  200 |     // Verification Methods
  201 |     async verifyProfileData(profileData: UpdateProfileData) {
  202 |         await this.page.waitForTimeout(waitTime.SHORT);
  203 |         let retries = 3;
  204 |         let success = false;
  205 |
  206 |         while (retries > 0 && !success) {
  207 |             try {
  208 |                 const displayedName = await this.getDisplayedNameValue();
  209 |                 const displayedEmail = await this.getDisplayedEmailValue();
  210 |                 const displayedWhatsapp = await this.getDisplayedWhatsappValue();
  211 |                 const displayedTelegram = await this.getDisplayedTelegramValue();
  212 |
  213 |                 await test.step('Verify Name', async () => {
  214 |                     console.log(`Name Comparison:\nExpected: "${profileData.name}"\nActual  : "${displayedName}"`);
  215 |                     expect(displayedName).toBe(profileData.name);
  216 |                 });
  217 |
  218 |                 await test.step('Verify Email', async () => {
  219 |                     console.log(`Email Comparison:\nExpected: "${profileData.email}"\nActual  : "${displayedEmail}"`);
  220 |                     expect(displayedEmail).toBe(profileData.email);
  221 |                 });
  222 |
  223 |                 await test.step('Verify WhatsApp', async () => {
  224 |                     console.log(`WhatsApp Number Comparison:\nExpected: "${profileData.whatsappNumber}"\nActual  : "${displayedWhatsapp}"`);
  225 |                     expect(displayedWhatsapp).toBe(profileData.whatsappNumber);
  226 |                 });
  227 |
  228 |                 await test.step('Verify Telegram', async () => {
  229 |                     console.log(`Telegram Username Comparison:\nExpected: "${profileData.telegramUsername}"\nActual  : "${displayedTelegram}"`);
  230 |                     expect(displayedTelegram).toBe(profileData.telegramUsername);
  231 |                 });
  232 |
  233 |                 success = true;
  234 |             } catch (error) {
  235 |                 retries--;
  236 |                 if (retries === 0) throw error;
  237 |                 await this.page.waitForTimeout(waitTime.SHORT);
  238 |                 console.log(`Retrying verification... (${retries} attempts left)`);
  239 |             }
  240 |         }
  241 |     }
  242 | }
  243 |
```