# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Tests >> Admin Login Tests >> Valid login redirects to dashboard admin
- Location: /Applications/example-playwright-ts/Tests/login.test.ts:18:13

# Error details

```
TimeoutError: locator.waitFor: Timeout 10000ms exceeded.
Call log:
  - waiting for getByText('Login success') to be visible

    at LoginPage.getSuccessMessageLogin (/Applications/example-playwright-ts/Pages/Login/key_login.ts:69:23)
    at /Applications/example-playwright-ts/Tests/login.test.ts:29:56
    at /Applications/example-playwright-ts/Tests/login.test.ts:28:24
```

# Page snapshot

```yaml
- button "Menu":
  - img "Menu"
- link "Nearon":
  - img "Nearon"
- separator
- text: Theme
- switch "moon sun":
  - img "moon"
  - img "sun"
- button
- separator
- link "avatar Nakia Administrator":
  - img "avatar"
  - text: Nakia Administrator
- button "Org Settings":
  - img "Org Settings"
- button "Privacy & Security":
  - img "Privacy & Security"
- button "Sensor Management":
  - img "Sensor Management"
- button "Device Management":
  - img "Device Management"
- button "poweroff":
  - img "poweroff"
- main:
  - navigation:
    - list:
      - listitem:
        - link "Org Settings"
  - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - button:
    - img
  - link "Leaflet"
  - text: ©
  - link "OpenStreetMap"
  - text: contributors
  - img "search"
  - combobox "Search location by district"
  - button "Search"
  - button "plus":
    - img "plus"
  - button "minus":
    - img "minus"
  - button "aim":
    - img "aim"
  - button "eye":
    - img "eye"
  - img "project"
  - text: Project
  - heading "9" [level=3]
  - img "project"
  - text: Node
  - heading "266" [level=3]
  - img "project"
  - text: Sensor
  - heading "2956" [level=3]
  - img "project"
  - text: Actuator
  - heading "5" [level=3]
  - img "project"
  - text: CCTV
  - heading "21" [level=3]
  - img "Nearon"
  - text: Copyright © 2024 Nearon Powered by
  - link "Synapsis.id"
  - text: ", All Rights Reserved build version 0.0.6"
  - link "Synapsis LinkedIn":
    - img "Synapsis LinkedIn"
  - link "Synapsis Instagram":
    - img "Synapsis Instagram"
  - link "Synapsis Website":
    - img "Synapsis Website"
- alert: Nearon Admin
```

# Test source

```ts
   1 | import { Page } from '@playwright/test';
   2 | import { BasePage } from '@fixtures/basePage';
   3 | import { LoginElements } from './el_login';
   4 | import data from "@general/data";
   5 | import { expect } from "@playwright/test";
   6 | import { waitTime } from "@general/constants";
   7 |
   8 | export class LoginPage extends BasePage {
   9 |     private readonly elements: LoginElements;
  10 |
  11 |     constructor(page: Page) {
  12 |         super(page);
  13 |         this.elements = new LoginElements(page);
  14 |     }
  15 |
  16 |     async gotoLoginPage() {
  17 |         let retryCount = 0;
  18 |         const maxRetries = 5;
  19 |
  20 |         while (retryCount < maxRetries) {
  21 |             try {
  22 |                 await this.page.goto("/");
  23 |                 await this.elements.userName.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  24 |                 await this.elements.password.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  25 |                 await this.elements.loginButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  26 |                 return;
  27 |             } catch (error) {
  28 |                 retryCount++;
  29 |                 console.log(`Retry loading login page... (${retryCount}/${maxRetries})`);
  30 |                 if (retryCount === maxRetries) {
  31 |                     throw new Error(`Failed to load login page after ${maxRetries} attempts`);
  32 |                 }
  33 |                 await this.page.waitForTimeout(waitTime.MEDIUM);
  34 |             }
  35 |         }
  36 |     }
  37 |
  38 |     async loginWithCredentials(userName: string, password: string, isNegativeTest: boolean = false) {
  39 |         await this.elements.userName.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  40 |         await this.elements.password.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  41 |         await this.elements.loginButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  42 |
  43 |         await this.elements.userName.fill(userName);
  44 |         await this.elements.password.fill(password);
  45 |         await this.elements.loginButton.click();
  46 |
  47 |         if (!isNegativeTest) {
  48 |             let retryCount = 0;
  49 |             const maxRetries = 5;
  50 |             
  51 |             while (retryCount < maxRetries) {
  52 |                 try {
  53 |                     await expect(this.page).toHaveURL(/map/, { timeout: waitTime.MEDIUM });
  54 |                     break;
  55 |                 } catch (error) {
  56 |                     retryCount++;
  57 |                     if (retryCount === maxRetries) {
  58 |                         throw new Error(`Gagal redirect ke halaman map setelah ${maxRetries} percobaan`);
  59 |                     }
  60 |                     console.log(`Percobaan login ke-${retryCount} gagal, mencoba lagi...`);
  61 |                     await this.page.waitForTimeout(waitTime.MEDIUM);
  62 |                 }
  63 |             }
  64 |         }
  65 |     }
  66 |
  67 |     async getSuccessMessageLogin() {
  68 |         const message = this.page.getByText(data.LoginData.successMessageLogin);
> 69 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
     |                       ^ TimeoutError: locator.waitFor: Timeout 10000ms exceeded.
  70 |         return message;
  71 |     }
  72 |
  73 |     async getErrorMessage() {
  74 |         const message = this.page.getByText(data.LoginData.errorMessageLogin);
  75 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  76 |         return message;
  77 |     }
  78 | }
  79 |
```