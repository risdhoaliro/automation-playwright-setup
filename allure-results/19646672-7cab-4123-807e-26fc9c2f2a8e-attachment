# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Profile Tests >> Mitra Profile Tests >> Profile Management Tests >> Cancel Update Profile
- Location: /Applications/example-playwright-ts/Tests/profile.test.ts:324:17

# Error details

```
TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
=========================== logs ===========================
waiting for navigation to "**/profile" until "load"
============================================================
    at ProfilePage.gotoProfilePage (/Applications/example-playwright-ts/Pages/Profile/key_profile.ts:31:25)
    at setupMitraProfile (/Applications/example-playwright-ts/Tests/profile.test.ts:78:9)
    at /Applications/example-playwright-ts/Tests/profile.test.ts:263:13
```

# Test source

```ts
   1 | import { Page } from '@playwright/test';
   2 | import { BasePage } from '@fixtures/basePage';
   3 | import { ProfileElements } from './el_profile';
   4 | import { expect, test } from "@playwright/test";
   5 | import data from "../../General/data";
   6 | import { waitTime } from "../../General/constants";
   7 |
   8 | interface UpdateProfileData {
   9 |     name: string;
   10 |     email: string;
   11 |     whatsappNumber: string;
   12 |     telegramUsername: string;
   13 | }
   14 |
   15 | export class ProfilePage extends BasePage {
   16 |     private readonly elements: ProfileElements;
   17 |
   18 |     constructor(page: Page) {
   19 |         super(page);
   20 |         this.elements = new ProfileElements(page);
   21 |     }
   22 |
   23 |     async gotoProfilePage() {
   24 |         // Tunggu hingga menu profile terlihat
   25 |         await this.elements.profileMenu.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   26 |         
   27 |         // Klik profile menu terlebih dahulu
   28 |         await this.elements.profileMenu.click();
   29 |         
   30 |         // Tunggu hingga redirect ke halaman profile selesai
>  31 |         await this.page.waitForURL('**/profile', { timeout: waitTime.MEDIUM });
      |                         ^ TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
   32 |     }
   33 |
   34 |     // Profile Picture Methods
   35 |     async uploadProfilePicture(filePath: string) {
   36 |         // Tunggu hingga tombol choose file terlihat
   37 |         await this.elements.chooseFileButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   38 |         
   39 |         // Upload foto
   40 |         const [fileChooser] = await Promise.all([
   41 |             this.page.waitForEvent('filechooser'),
   42 |             this.elements.chooseFileButton.click()
   43 |         ]);
   44 |         await fileChooser.setFiles(filePath);
   45 |     }
   46 |
   47 |     async savePhotoProfileButton() {
   48 |         const button = this.elements.savePhotoProfileButton;
   49 |         await button.waitFor({ state: 'visible' });
   50 |         await button.click();
   51 |     }
   52 |
   53 |     // Update Profile Methods
   54 |     async clickUpdateProfileButton() {
   55 |         await this.elements.updateButton.click();
   56 |     }
   57 |
   58 |     async getUpdateProfileModal() {
   59 |         return this.elements.updateProfileModal;
   60 |     }
   61 |
   62 |     // Clear field methods
   63 |     private async clearProfileFields() {
   64 |         await this.elements.nameInput.clear();
   65 |         await this.elements.emailInput.clear();
   66 |         await this.elements.whatsappNumberInput.clear();
   67 |         await this.elements.telegramUsernameInput.clear();
   68 |
   69 |         // Verify fields are empty
   70 |         await this.verifyFieldsAreEmpty();
   71 |     }
   72 |
   73 |     private async verifyFieldsAreEmpty() {
   74 |         await expect(this.elements.nameInput).toHaveValue('');
   75 |         await expect(this.elements.emailInput).toHaveValue('');
   76 |         await expect(this.elements.whatsappNumberInput).toHaveValue('');
   77 |         await expect(this.elements.telegramUsernameInput).toHaveValue('');
   78 |     }
   79 |
   80 |     async fillUpdateProfileForm(data: UpdateProfileData) {
   81 |         // Clear and verify fields are empty first
   82 |         await this.clearProfileFields();
   83 |         // Fill in the form
   84 |         await this.elements.nameInput.fill(data.name);
   85 |         await this.elements.emailInput.fill(data.email);
   86 |         await this.elements.whatsappNumberInput.fill(data.whatsappNumber);
   87 |         await this.elements.telegramUsernameInput.fill(data.telegramUsername);
   88 |     }
   89 |
   90 |     async clickSaveChangesButton() {
   91 |         // Tunggu hingga tombol save changes terlihat
   92 |         await this.elements.saveChangesButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
   93 |         await this.elements.saveChangesButton.click();
   94 |     }
   95 |
   96 |     async clickCancelButton() {
   97 |         await this.elements.cancelButton.click();
   98 |     }
   99 |
  100 |     async getSuccessMessageUploadImageValid() {
  101 |         const message = this.page.getByText(data.profileData.messages.successImageUpdate);
  102 |         await message.waitFor({ state: 'visible' });
  103 |         return message;
  104 |     }
  105 |
  106 |     async getErrorMessageUploadImageInValid() {
  107 |         const message = this.page.getByText(data.profileData.messages.error.fileTooBig);
  108 |         await message.waitFor({ state: 'visible' });
  109 |         return message;
  110 |     }
  111 |
  112 |     async getSuccessMessageUpdateProfile() {
  113 |         const message = this.page.getByText(data.profileData.messages.successProfileUpdate);
  114 |         await message.waitFor({ state: 'visible' });
  115 |         return message;
  116 |     }
  117 |     
  118 |     
  119 |
  120 |     // Password Change Methods
  121 |     async changePassword(currentPassword: string, newPassword: string, confirmPassword: string) {
  122 |         await test.step('Change Password Process', async () => {
  123 |             // Scroll to Change Password section dengan retry
  124 |             let retries = 5;
  125 |             let isVisible = false;
  126 |
  127 |             while (retries > 0 && !isVisible) {
  128 |                 try {
  129 |                     // Scroll ke section
  130 |                     await this.elements.changePasswordSection.scrollIntoViewIfNeeded();
  131 |                     
```