# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Logout Tests >> should successfully logout
- Location: /Applications/automation-nearon-playwright/Tests/logout.test.ts:16:9

# Error details

```
TimeoutError: locator.click: Timeout 30000ms exceeded.
Call log:
  - waiting for locator('//button[span[text()=\'Log In\']]')
    - locator resolved to <button type="submit" class="ant-btn css-rtjktz ant-btn-primary ant-btn-color-primary ant-btn-variant-solid w-full mt-4">…</button>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - performing click action
    - <div class="justify-center w-full h-full ant-flex css-rtjktz ant-flex-align-stretch ant-flex-vertical">…</div> intercepts pointer events
  - retrying click action
    - waiting for element to be visible, enabled and stable

    at LoginPage.loginWithCredentials (/Applications/automation-nearon-playwright/Pages/Login/key_login.ts:45:41)
    at setupAdminLogin (/Applications/automation-nearon-playwright/Pages/Login/suite_login.ts:10:5)
    at setupLogoutTests (/Applications/automation-nearon-playwright/Pages/Logout/suite_logout.ts:7:23)
    at /Applications/automation-nearon-playwright/Tests/logout.test.ts:11:23
```

# Page snapshot

```yaml
- img "login"
- img "Nearon"
- heading "Welcome to Nearon IoT!" [level=5]
- text: Enter the username and password you use to log in. * Username
- textbox "* Username": qaautomationadmin
- text: "* Password"
- textbox "* Password": password
- img "eye-invisible"
- text: Forgot your password?
- link "Click here"
- button "Log In"
- text: NEARON by Synapsis.id Nearon Powered by
- link "Synapsis.id"
- text: ", All Rights Reserved build version 0.0.6"
- alert
```

# Test source

```ts
   1 | import { Page } from '@playwright/test';
   2 | import { BasePage } from '@fixtures/basePage';
   3 | import { LoginElements } from './el_login';
   4 | import data from "@general/data";
   5 | import { expect } from "@playwright/test";
   6 | import { waitTime } from "@general/constants";
   7 |
   8 | export class LoginPage extends BasePage {
   9 |     private readonly elements: LoginElements;
  10 |
  11 |     constructor(page: Page) {
  12 |         super(page);
  13 |         this.elements = new LoginElements(page);
  14 |     }
  15 |
  16 |     async gotoLoginPage() {
  17 |         let retryCount = 0;
  18 |         const maxRetries = 5;
  19 |
  20 |         while (retryCount < maxRetries) {
  21 |             try {
  22 |                 await this.page.goto("/");
  23 |                 await this.elements.userName.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  24 |                 await this.elements.password.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  25 |                 await this.elements.loginButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  26 |                 return;
  27 |             } catch (error) {
  28 |                 retryCount++;
  29 |                 console.log(`Retry loading login page... (${retryCount}/${maxRetries})`);
  30 |                 if (retryCount === maxRetries) {
  31 |                     throw new Error(`Failed to load login page after ${maxRetries} attempts`);
  32 |                 }
  33 |                 await this.page.waitForTimeout(waitTime.MEDIUM);
  34 |             }
  35 |         }
  36 |     }
  37 |
  38 |     async loginWithCredentials(userName: string, password: string, isNegativeTest: boolean = false) {
  39 |         await this.elements.userName.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  40 |         await this.elements.password.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  41 |         await this.elements.loginButton.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  42 |
  43 |         await this.elements.userName.fill(userName);
  44 |         await this.elements.password.fill(password);
> 45 |         await this.elements.loginButton.click();
     |                                         ^ TimeoutError: locator.click: Timeout 30000ms exceeded.
  46 |
  47 |         if (!isNegativeTest) {
  48 |             let retryCount = 0;
  49 |             const maxRetries = 5;
  50 |             
  51 |             while (retryCount < maxRetries) {
  52 |                 try {
  53 |                     await expect(this.page).toHaveURL(/map/, { timeout: waitTime.MEDIUM });
  54 |                     break;
  55 |                 } catch (error) {
  56 |                     retryCount++;
  57 |                     if (retryCount === maxRetries) {
  58 |                         throw new Error(`Gagal redirect ke halaman map setelah ${maxRetries} percobaan`);
  59 |                     }
  60 |                     console.log(`Percobaan login ke-${retryCount} gagal, mencoba lagi...`);
  61 |                     await this.page.waitForTimeout(waitTime.MEDIUM);
  62 |                 }
  63 |             }
  64 |         }
  65 |     }
  66 |
  67 |     async getSuccessMessageLogin() {
  68 |         await this.elements.successMessage.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  69 |         return this.elements.successMessage;
  70 |         // const message = this.page.getByText(data.LoginData.successMessageLogin);
  71 |         // await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  72 |         // return message;
  73 |     }
  74 |
  75 |     async getErrorMessage() {
  76 |         const message = this.page.getByText(data.LoginData.errorMessageLogin);
  77 |         await message.waitFor({ state: 'visible', timeout: waitTime.MEDIUM });
  78 |         return message;
  79 |     }
  80 | }
  81 |
```